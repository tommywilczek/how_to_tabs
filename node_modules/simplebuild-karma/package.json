{
  "name": "simplebuild-karma",
  "version": "0.8.1",
  "engines": {
    "node": ">=0.12"
  },
  "description": "A simple library for automating Karma",
  "main": "src/index.js",
  "scripts": {
    "test": "jake"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jamesshore/simplebuild-karma"
  },
  "keywords": [
    "simplebuild",
    "karma",
    "test"
  ],
  "author": {
    "name": "James Shore"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jamesshore/simplebuild-karma/issues"
  },
  "homepage": "https://github.com/jamesshore/simplebuild-karma",
  "devDependencies": {
    "chai": "^3.2.0",
    "gaze": "^0.5.1",
    "jake": "^8.0.12",
    "jshint": "^2.8.0",
    "karma-mocha": "^0.2.0",
    "karma-safari-launcher": "^0.1.1",
    "mocha": "^2.2.5",
    "simplebuild-jshint": "^1.0.1"
  },
  "dependencies": {
    "simplebuild": "^0.5.0"
  },
  "peerDependencies": {
    "karma": ">=0.13"
  },
  "readme": "# Simplebuild-Karma\n\nA simple library for automating Karma.\n\n[Karma](http://karma-runner.github.io) is a test runner for JavaScript. Itâ€™s useful for automated cross-browser testing. This library provides a simple interface to Karma that's convenient to use with task automation tools such as [Grunt](http://gruntjs.com/) or [Jake](https://github.com/mde/jake).\n\n\n## Installation\n\nThis is a Node.js library. Install Node, then:\n\n`npm install simplebuild-karma` (add `--save` or `--save-dev` if you want)\n\nNote that this library uses your existing Karma installation. (Karma will be installed if needed.)\n\n\n## Usage\n\nThis library provides these functions:\n\n* `start`: Start the Karma server.\n* `run`: Run Karma.\n\nThere are two main ways to use Karma: launch Karma and test browsers once and leave them running (\"development\" workflow), or start Karma and the browsers every time you test (\"CI server\" workflow).\n\nTo use the development workflow, call `start`, manually capture your test browsers, then call `run` every time you want to run your tests. (To make Karma capture your test browsers automatically, use the `browsers` option in the [Karma config file](http://karma-runner.github.io/0.13/config/browsers.html).)\n\nTo use the CI server workflow, call `run` with the `capture` option set. Karma will launch, capture your browsers, run your tests, then automatically shut down.\n\n\n### `start(options, success, failure)`\n\nStart the Karma server and leave it running.\n\n* `options`: an object containing the following properties:\n    * `configFile` (string): path to the Karma config file.\n\n* `success()`: a function to call if the server exits successfully.\n\n* `failure(message)`: a function to call if the server does not exit successfully. A simple error message is provided in the `message` parameter, but detailed error messages are provided by Karma to stdout (or stderr).\n\n\n### `run(options, success, failure)`\n\nRun Karma tests. You need to call `start` first unless you use the `capture` option. \n\n* `options`: an object containing the following properties:\n    * `configFile` (string): path to the Karma config file.\n    * `expectedBrowsers` (optional array of strings, default `[]`): a list of test browsers. A warning is printed to stdout for each browser in the list that isn't tested. The string must exactly match the string displayed by Karma (e.g., \"Chrome 42.0.2311 (Mac OS X 10.10.3)\").\n    * `strict` (optional boolean, default `true`): causes the tests to fail if `expectedBrowsers` results in any warnings.\n    * `capture` (optional array of strings, default `[]`): if present, automatically starts Karma, captures the provided browsers, and shuts them down when done. (Equivalent to using `karma start configFile --browsers XX,YY --single-run`.)\n    \n* `success()`: a function to call if the tests succeed.\n\n* `failure(message)`: a function to call if the tests fail. A simple error message is provided in the `message` parameter, but detailed error messages are provided by Karma to stdout (or stderr).\n\n\n## Examples\n\nThis library is designed to be easy to integrate with any task automation tool:\n\n### Grunt\n\n```javascript\nvar karma = require(\"simplebuild-karma\");\n\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        karma: {\n            configFile: \"karma.conf.js\",\n            expectedBrowsers: [\n                \"Chrome 42.0.2311 (Mac OS X 10.10.3)\",\n                \"Firefox 37.0.0 (Mac OS X 10.10)\"\n            ]\n        }\n    });\n\n    grunt.registerTask(\"karma\", \"Start Karma server\", function() {\n        karma.start(grunt.config(\"karma\"), this.async(), grunt.warn);\n    });\n    \n    grunt.registerTask(\"test\", \"Run tests\", function() {\n        karma.run(grunt.config(\"karma\"), this.async(), grunt.warn);\n    });\n\n    grunt.registerTask(\"default\", [ \"test\" ]);\n};\n```\n\n### Jake\n\n```javascript\nvar karma = require(\"simplebuild-karma\");\n\ntask(\"default\", [ \"test\" ]);\n\ndesc(\"Start Karma server\");\ntask(\"karma\", function() {\n    karma.start({\n        configFile: \"karma.conf.js\"\n    }, complete, fail);\n}, { async: true });\n\ndesc(\"Run tests\");\ntask(\"test\", function() {\n    karma.run({\n        configFile: \"karma.conf.js\",\n        expectedBrowsers: [\n            \"Chrome 42.0.2311 (Mac OS X 10.10.3)\",\n            \"Firefox 37.0.0 (Mac OS X 10.10)\"\n        ]\n    }, complete, fail);\n}, { async: true });\n```\n\n### Plain JavaScript\n\n```javascript\nvar karma = require(\"simplebuild-karma\");\n\nkarma.run({\n    configFile: \"karma.conf.js\",\n    expectedBrowsers: [\n        \"Chrome 42.0.2311 (Mac OS X 10.10.3)\",\n        \"Firefox 37.0.0 (Mac OS X 10.10)\"\n    ],\n    capture: [ \"Chrome\", \"Firefox\" ]\n}, function() {\n    console.log(\"OK\");\n}, function(message) {\n    console.log(message);\n});\n```\n\n## About Simplebuild\n\nThis library is a simplebuild module. In addition to being used as a standalone library (as described above), it can also be used with simplebuild extensions and mappers. For more information about simplebuild, see [the Simplebuild GitHub page](https://github.com/jamesshore/simplebuild).\n\n\n## Version History\n\n__0.8.1:__ Fix: Corrected API naming error (`start` was misnamed)\n__0.8.0:__ Initial release.\n\n\n## Contributors\n\nCreated by James Shore.\n\n### Release Process\n\n1. Update version history in readme and check in\n2. Ensure clean build: \n    1. `./jake.sh karma`\n    2. Capture firefox: `http://localhost:9876`\n    3. `./jake.sh`\n3. Update npm version: `npm version [major|minor|patch]`\n4. Release to npm: `npm publish`\n5. Release to github: `git push && git push --tags`\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2015 James Shore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "412e36021f02ff041036379576d1393c7a01e410",
  "_id": "simplebuild-karma@0.8.1",
  "_shasum": "85de71634339dca19d3ba5db07a5567e65040ff7",
  "_from": "simplebuild-karma@*"
}
